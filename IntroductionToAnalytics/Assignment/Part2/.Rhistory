+ best.fit = regsubsets(Salary~., data = Hitters[folds != j, ], nvmax = 19)
+ for (i in 1:19){
+ pred = predict(best.fit, Hitters[folds == j,], id = i)
+ cv.errors[j,i] = mean((Hitters$Salary[folds == j] - pred) ^2)
+           }
+      }
for (j in 1:k){+ best.fit = regsubsets(Salary~., data = Hitters[folds != j, ], nvmax = 19)
+ for (i in 1:19){
+ pred = predict(best.fit, Hitters[folds == j,], id = i)
+ cv.errors[j,i] = mean((Hitters$Salary[folds == j] - pred) ^2)
+           }
+      }
for (j in 1:k){                                                                                                 + best.fit = regsubsets(Salary~., data = Hitters[folds != j, ], nvmax = 19)
+ for (i in 1:19){
+ pred = predict(best.fit, Hitters[folds == j,], id = i)
+ cv.errors[j,i] = mean((Hitters$Salary[folds == j] - pred) ^2)
+           }
+      }
for (j in 1:k){
best.fit = regularsubsets(Salary~., data = Hitters[folds != j, ], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, Hitters[folds == j,], id = i)
cv.errors[j,i] = mean((Hitters$Salary[folds == j] - pred) ^2)
}
}
for (j in 1:k){
best.fit = regsubsets(Salary~., data = Hitters[folds != j, ], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, Hitters[folds == j,], id = i)
cv.errors[j,i] = mean((Hitters$Salary[folds == j] - pred) ^2)
}
}
install.packages('glmnet')
library(glmnet)
dim(Hitters)
model.matrix(Salary~., Hitters)
x = model.matrix(Salary~., Hitters)[,-1]
head(x)
y = Hitters$Salary
grid=10^seq(10,-2,length=100)
head(grid)
head((10,-2,length=100))
(10,-2,length=100)
head(seq(10,-2,length=100))
?seq
head(seq(10,-2,length=10))
head(seq(10,-2,length=25))
head(grid)
ridge.mod = glmnet(x,y,alpha = 0, lambda = grid)
seq(-2,10,length = 10)
seq(-2,10,length = 10)
seq(10,-2,length = 10)
tail(grid)
dim(coef(ridge.mod))
ridge.mod$lambda[50]
coef(ridge.mod, id = 50)
coef(ridge.mod)[50]
coef(ridge.mod)[,50]
sum(coef(ridge.mod)[,50])
sum((coef(ridge.mod)[,50])^2)
sqrt(sum((coef(ridge.mod)[,50])^2))
sqrt(sum((coef(ridge.mod)[-1,50])^2))
ridge.mod$lambda[,70]
ridge.mod$lambda[70]
coef(ridge.mod)[,70]
sqrt((coef(ridge.mod)[-1,70])^2)
sqrt(sum((coef(ridge.mod)[-1,70])^2))
predict(ridge.mod, s = 50, type = 'coefficients')[1:20,]
set.seed(1)
?sample
train = sample(1:nrow(x), nrow(x)/2)
test = !train
head(train)
head(test)
test = -train
head(test)
length(x)
length(train)
length(test)
nrow(x)
y.test = y[test]
ridge.mod = glmnet(x[train,], y[train,], alpha = 0, lambda = grid, tresh = 1e-12)
ridge.mod = glmnet(x[train,], y[train,], alpha = 0, lambda = grid, thresh = 1e-12)
ridge.mod = glmnet(x[train,], y[train], alpha = 0, lambda = grid, thresh = 1e-12)
ridge.pred = predict(ridge.mod, s = 4, newx = x[test,])
mean((ridge.pred - y.test)^2)
set.seed(1)
cv.out = cv.glmnet(x[train,], y[train], alpha = 0)
plot(cv.out)
bestlam = cv.out$lambda.min
bestlam
ridge.pred = predict(ridge.mod, s = bestlam, newx = x[test,])
mean((ridge.pred - y.test) ^ 2)
out = glmnet(x,y,alpha = 0)
predict(out, type = 'coefficients', s = bestlam)[1:20,]
lasso.mod = glmnet(x,y,alpha = 1)
lasso.mod = glmnet(x[train,],y[train],alpha = 1)
plot(lasso.mod)
set.seed(1)
cv.out = cv.glmnet(x[train,], y[train], alpha = 1)
plot(cv.out)
bestlam = cv.out$lamda.min
bestlam
cv.out=cv.glmnet(x[train ,],y[train],alpha=1)
bestlam=cv.out$lambda .min
bestlam=cv.out$lambda.min
bestlam
plot(cv.out)
cv.out = cv.glmnet(x[train,], y[train], alpha = 1)
plot(cv.out)
cv.out = cv.glmnet(x[train,], y[train], alpha=1)
set.seed(1)
cv.out = cv.glmnet(x[train,], y[train], alpha = 1)
bestlam = cv.out$lambda.min
bestlam
set.seed(1)
cv.out = cv.glmnet(x[train,], y[train], alpha = 1)
bestlam=cv.out$lambda.min
bestlam
lasso.pred = predict(lasso.mod, s = bestlam, newx = x[test,])
mean((lasso.pred - y.test) ^2)
out = glmnet(x,y,alpha = 1, lambda = grid)
lasso.coef = predict(out, type = 'coefficients', s = bestlam)[1:20,]
lasso.coef
install.packages('pls')
library(pls)
set.seed(2)
pcr.fit = pcr (Salary ~., data = Hitters, scale = TRUE, validation = 'CV')
summary(pcr.fit)
validationplot(pcr.fit, type = 'MSEP')
validationplot(pcr.fit, val.type = 'MSEP')
set.seed (1)
pcr.fit = pcr(Salary~., data = Hitters, subset = train, scale = TRUE)
pcr.fit = pcr(Salary~., data = Hitters, subset = train, scale = TRUE, validation = 'CV')
validationplot(pcr.fit, val.type = 'MSEP')
pcr.pred = predict(pcr.fit, x[test,], ncomp = 7)
mean((pcr.pred - y.test) ^2)
pcr.fit = pcr(y~x, scale = TRUE, ncomp = 7)
summary(pcr.fit)
names(cv.out)
?cv.glmnet
sd (c(5,8,12))
which.min(c(4,1,6))
x = c(4,1,6)
which.min(x)
8*6
2^16
2^
4
2^
8*10
sqrt(16)
sqrt(2)
abs(-9)
?abs()
squareRoot2 = sqrt(2)
squareRoot2
HoursYear <- 265*24
HoursYear
HoursYear <- 365*24
HoursYear
ls()
c(2,3,5,8, 13)
country = c('Brazil', 'China', 'India', 'Switzerland', 'USA')
lifeExpectancy = c(74, 76, 65, 83, 79)
country
lifeExpectancy
country[1]
lifeExpectancy[3]
seq(0,100,2)
countryData = data.frame(country, lifeExpectancy)
countryData
countryData$Population = c(199000, 1390000, 1240000, 7997, 318000)
countryData
country = c('Austrlia', 'Greece')
lifeExpectancy = c(82, 81)
population = c(23050, 11125)
newCountryData = data.frame(country, lifeExpectancy, population)
newCountryData
allCountryData = rbind(countryData, newCountryData)
allCountryData = rbind(countryData, newCountryData)
allCountryData = rbind(unname(countryData), newCountryData)
allCountryData = rbind(unname(countryData), unname(newCountryData))
names(countryData)
names(newCountryData)
Population = c(23050, 11125)
newCountryData = data.frame(country, lifeExpectancy, Population)
rbind(countryData, newCountryData)
allCountryData = rbind(countryData, newCountryData)
allCountryData
getwd()
setwd('/Users/admin/Documents/Coursera/AnalyticsEdge-edX/Week1')
getwd()
WHO = read.csv('WHO.csv')
head(WHO)
str(WHO)
summary(WHO)
WHOEurope = subset(WHO, Region == 'Europe')
head(WHOEurope)
str(WHOEurope)
write.csv(WHOEurope, 'WHOEurope.csv')
ls()
rm(WHO_Europe)
rm(WHOEurope)
str(WHOEurope)
str(WHO)
summary(WHO)
WHO$Under15
mean(WHO$Under15)
sd(WHO$Under15)
summary(WHO$Under15)
which.min(WHO$Under15)
WHO[which.min(WHO$Under15)]
WHO[which.min(WHO$Under15),]
WHO$Country[which.min(WHO$Under15)]
WHO$Country[which.max(WHO$Under15)]
plot(WHO$FertilityRate ~ WHO$GNI)
outliers = subset(WHO, GNI > 10000 & FertilityRate > 2.5)
nrow(outliers)
plot(outliers$FertilityRate ~ outliers$GNI)
outliers[c('Country', 'GNI', 'FertilityRate')]
str(WHO)
mean(WHO$Over60)
summary(WHO$Over60)
WHO$Country[which.min(WHO$Over60)]
WHO$Country[which.max(WHO$LiteracyRate)]
hist(WHO$CellularSubscribers)
boxplot(WHO$LifeExpectancy ~ WHO$Region)
boxplot(WHO$LifeExpectancy ~ WHO$Region, xlab = '', ylab = 'LifeExpectancy', main = 'Life Expectancy of countries by region')
table(WHO$Region)
tapply(WHO$Over60, WHO$Region, mean)
tapply(WHO$LiteracyRate, WHO$Region, min)
tapply(WHO$LiteracyRate, WHO$Region, min, na.rm = TRUE)
tapply(WHO$ChildMortality, WHO$Region, mean)
WHO$Country[which.min(tapply(WHO$ChildMortality, WHO$Region, mean))]
WHO$Region[which.min(tapply(WHO$ChildMortality, WHO$Region, mean))]
WHO$Region[which.min(tapply(WHO$ChildMortality, WHO$Region, mean))]
USDA = read.csv('USDA.csv')
str(USDA)
summary(USDA)
USDA$Description[which.max(USDA$Sodium)]
USDA$Description[which.max(USDA$Sodium, na.rm = TRUE)]
USDA$Description[which.max(USDA$Sodium)]
highSodium = subset(USDA, Sodium > 10000)
nrow(highSodium)
highSodium
highSodium$Description
match ('Caviar', USDA$Description)
match ('CAVIAR', USDA$Description)
USDA$Sodium[match('CAVIAR', USDA$Description)]
summary(USDA$Sodium)
sd(USDA$Sodium)
sd(USDA$Sodium, na.rm = TRUE)
plot (USDA$TotalFat ~ USDA$Protien)
plot (USDA$TotalFat ~ USDA$Protein)
plot (USDA$TotalFat ~ USDA$Protein, xlab = 'Protein', ylab = 'Fat', main = 'Protein vs Fat', col = 'RED')
hist(USDA$VitaminC)
hist(USDA$VitaminC, xlab = 'Vitamin C', main = 'Histogram of Vitamin C Levels')
hist(USDA$VitaminC, xlab = 'Vitamin C', main = 'Histogram of Vitamin C Levels', xlim = c(0, 100))
hist(USDA$VitaminC, xlab = 'Vitamin C (mg)', main = 'Histogram of Vitamin C Levels', xlim = c(0, 100), breaks = 100)
hist(USDA$VitaminC, xlab = 'Vitamin C (mg)', main = 'Histogram of Vitamin C Levels', xlim = c(0, 100), breaks = 2000)
boxplot (USDA$Sugar, main = 'Boxplot of Sugar Levels')
boxplot (USDA$Sugar, main = 'Boxplot of Sugar Levels', ylab = 'Sugar in gms')
USDA$Sodium [1] > mean(USDA$Sodium, na.rm = TRUE)
USDA$Sodium [50] > mean(USDA$Sodium, na.rm = TRUE)
highSodium = USDA$Sodium > mean(USDA$Sodium, na.rm = TRUE)
str(highSodium)
as.numeric(highSodium)
highSodium = as.numeric(highSodium)
head(highSodium)
USDA$HighSodium = highSodium
str(USDA)
USDA$highProtein = as.numeric(USDA$Protein > mean(USDA$Protein, na.rm = TRUE))
str(USDA)
USDA$highFat = as.numeric(USDA$TotalFat > mean(USDA$TotalFat, na.rm = TRUE))
USDA$HighCarb = as.numeric(USDA$Carbohydrates > mean(USDA$Carbohydrates, na.rm = TRUE))
USDA$HighCarb = as.numeric(USDA$Carbohydrate > mean(USDA$Carbohydrate, na.rm = TRUE))
str(USDA)
table(USDA$HighSodium == 1)
table(USDA$HighSodium , USDA$TotalFat)
table(USDA$HighSodium , USDA$HighFat)
names(USDA)
table(USDA$HighSodium , USDA$highFat)
tapply(USDA$Iron, USDA$Protein, mean, na.rm = TRUE)
names(USDA)
tapply(USDA$Iron, USDA$highProtein, mean, na.rm = TRUE)
tapply (USDA$VitaminC, USDA$HighCarb, mean, na.rm = TRUE)
tapply (USDA$VitaminC, USDA$HighCarb, max, na.rm = TRUE)
tapply (USDA$VitaminC, USDA$HighCarb, summary, na.rm = TRUE)
chicagoCrime = read.csv('mvtWeek1.csv')
names(chicagoCrime)
mvt = read.csv('mvtWeek1.csv')
str(mvt)
max(mvt$ID)
min(mvt$Beat)
length(mvt$Arrest == TRUE)
head(mvt$Arrest)
table(USDA$HighSodium == 1)
table(mvt$Arrest == TRUE)
table(mvt$LocationDescription == 'ALLEY')
head(mvt$Date)
dateConvert = as.Date(strptime(mvt$Date, '%m/%d/%y %H:%M'))
summary(dateConvert)
mvt$Month = months (dateConvert)
mvt$Weekday = weekdays(dateConvert)
mvt$Date = dateConvert
names(mvt)
table(mvt$Month)
which.min(table(mvt$Month))
table(mvt$Month < 16000)
table(mvt$Month)
mvt$Weekday[which.max(mvt$Weekday)]
mvt$Weekday[which.max(table(mvt$Weekday))]
table(mvt$Weekday)
which.max(table(mvt$Weekday))
mvt$Weekday[which.max(table(mvt$Weekday))]
table(subset(mvt, Arrest == TRUE))
nrow(subset(mvt, Arrest == TRUE))
head(subset(mvt, Arrest == TRUE))
arrestMade = subset(mvt, Arrest == TRUE)
table(arrestMade$Month)
which.max(table(arrestMade$Month))
hist(mvt$Date, breaks = 100)
boxplot(mvt$Date)
boxplot(mvt$Date ~ mvt$Arrest)
boxplot(mvt$Arrest ~ mvt$Date)
boxplot(mvt$Date ~ mvt$Arrest)
table(mvt$Year, mvt$Arrest)
table(mvt$Year == 2001, mvt$Arrest)
nrow(mvt$Year == 2001)
length(mvt$Year == 2001)
length(subset(mvt,Year == 2001))
2152 / 18517
nrow(subset(mvt, Year == 2001))
mvt2001 = subset(mvt, Year == 2001)
nrow(mvt2001)
table(mvt2001$Arrest)
18517 / 20669
unique(mvt2001$Year)
nrow(mvt2001)
table(mvt2001$Arrest)
2152 / 20669
mvt2007 = subset(mvt, Year == 2007)
table(mvt2007$Arrest)
nrow(mvt2007)
1212 / 14280
mvt2012 = subset(mvt, Year == 2012)
table(mvt2012$Arrest)
nrow(mvt2012)
550 / 14092
sort(mvt$LocationDescription)
sort(table(mvt$LocationDescription))
freqLocs = c('STREET', 'PARKING LOT/GARAGE(NON.RESID.)', 'ALLEY', 'GAS STATION', 'DRIVEWAY - RESIDENTIAL')
freqCrimeLocns = subset(mvt, LocationDescription in freqLocs)
Top5 = subset(mvt, LocationDescription %in% freqLocs)
nrow(Top5)
nrow(mvt)
unique(Top5$LocationDescription)
Top5$LocationDescription = factor(Top5$LocationDescription)
unique(Top5$LocationDescription)
table(Top5$LocationDescription)
sort(table(Top5$LocationDescription))
sort(table(Top5$LocationDescription, Top5$Arrest))
table(Top5$LocationDescription, Top5$Arrest)
132/1675
132/1675 * 100
439 / 2111 * 100
249 / 2308 * 100
1603 / 14852 * 100
11595 / 156564 * 100
gasStationThefts = subset(mvt, LocationDescription == 'GAS STATION')
names(gastStationThefts)
names(gasStationThefts)
table(gasStationThefts$Weekday)
sort(table(gasStationThefts$Weekday))
resDrivewayThefts = subset(mvt, LocationDescription == 'DRIVEWAY - RESIDENTIAL')
sort(table(resDrivewayThefts$Weekday))
getwd()
setwd('/Users/admin/Documents/Coursera/AnalyticsEdge-edX/Week1/Assignment/Part2')
getwd()
setwd('/Users/admin/Documents/Coursera/AnalyticsEdge-edX/Week1/Assignment/Part2')
setwd('/Users/admin/Documents/Coursera/AnalyticsEdge-edX/Week1/Assignment/Part2')
/Users/admin/Documents/Coursera/AnalyticsEdge-edX/Week1
getwd()
setwd('/Users/admin/Documents/Coursera/AnalyticsEdge-edX/Week1/Assignment/Part2')
getwd()
ibm = read.csv('IBMStock.csv')
ge = read.csv('GEStock.csv')
pg = read.csv('ProctorGambleStock.csv')
cocaCola = read.csv('CocaColaStock.csv')
boeing = read.csv('BoeingStock.csv')
ibm = read.csv('IBMStock.csv')
ge = read.csv('GEStock.csv')
pg = read.csv('ProcterGambleStock.csv')
cocaCola = read.csv('CocaColaStock.csv')
boeing = read.csv('BoeingStock.csv')
#Format date
ibm$Date = as.Date (ibm$Date, '%m/%d/%y')
ge$Date = as.Date (ge$Date, '%m/%d/%y')
pg$Date = as.Date (pg$Date, '%m/%d/%y')
cocaCola$Date = as.Date (cocaCola$Date, '%m/%d/%y')
boeing$Date = as.Date (boeing$Date, '%m/%d/%y')
#1.1
nrow(ibm)
nrow(ge)
nrow(pg)
nrow(cocaCola)
nrow(boeing)
#1.2
min(years(ibm$Date))
min(years(ge$Date))
min(years(pg$Date))
min(years(cocaCola$Date))
min(years(boeing$Date))
#1.2
min(year(ibm$Date))
min(year(ge$Date))
min(year(pg$Date))
min(year(cocaCola$Date))
min(year(boeing$Date))
?months()
min((ibm$Date))
min((ge$Date))
head(sort(ibm$Date))
head(ibm)
#1.2
min(ibm$Date)
min(ge$Date)
min(pg$Date)
min(cocaCola$Date)
min(boeing$Date)
#1.3
max(ibm$Date)
max(ge$Date)
max(pg$Date)
max(cocaCola$Date)
max(boeing$Date)
summary(ibm)
summary(ibm$StockPrice)
summary(ge$StockPrice)
summary(cocaCola$StockPrice)
summary(boeing$StockPrice)
sd(pg$StockPrice)
main = 'Coca Cola Stock Price Trend')
plot(cocaCola$StockPrice ~ cocaCola$Date, xlab = 'Stock Price', ylab = 'Time', type = 'l', main = 'Coca Cola Stock Price Trend')
lines(pg$StockPrice ~ pg$Date)
lines(pg$StockPrice ~ pg$Date, col = 'red')
plot(cocaCola$StockPrice ~ cocaCola$Date, col = 'blue' ,xlab = 'Stock Price', ylab = 'Time', type = 'l', main = 'Coca Cola Stock Price Trend')
lines(pg$StockPrice ~ pg$Date, col = 'red')
plot(cocaCola$StockPrice ~ cocaCola$Date, col = 'red' ,xlab = 'Stock Price', ylab = 'Time', type = 'l', main = 'Coca Cola Stock Price Trend')
lines(pg$StockPrice ~ pg$Date, col = 'blue')
abline(v = as.Date (c('2000-03-01')), lwd = 2)
plot(cocaCola$StockPrice ~ cocaCola$Date, col = 'red' ,xlab = 'Stock Price', ylab = 'Time', type = 'l', main = 'Coca Cola Stock Price Trend')
lines(pg$StockPrice ~ pg$Date, col = 'blue')
abline(v = as.Date (c('2000-03-01')), lwd = 2)
plot(cocaCola$StockPrice ~ cocaCola$Date, col = 'red' ,xlab = 'Stock Price', ylab = 'Time', type = 'l', main = 'Coca Cola Stock Price Trend')
lines(pg$StockPrice ~ pg$Date, col = 'blue')
legend(c('Coca Cola', 'Procter & Gamble'))
legend(c('Coca Cola', 'Procter & Gamble'), col = c('red', 'blue'), lty = c(1,1))
?legend()
legend(legend = c('Coca Cola', 'Procter & Gamble'), col = c('red', 'blue'), lty = c(1,1))
legend(x = 2000, y = 9.5, legend = c('Coca Cola', 'Procter & Gamble'), col = c('red', 'blue'), lty = c(1,1))
legend(x = 2000, legend = c('Coca Cola', 'Procter & Gamble'), col = c('red', 'blue'), lty = c(1,1))
plot(cocaCola$StockPrice ~ cocaCola$Date, col = 'red' ,xlab = 'Stock Price', ylab = 'Time', type = 'l', main = 'Coca Cola Stock Price Trend')
lines(pg$StockPrice ~ pg$Date, col = 'blue')
legend(x = 2000, legend = c('Coca Cola', 'Procter & Gamble'), col = c('red', 'blue'), lty = c(1,1))
legend(x = 100, legend = c('Coca Cola', 'Procter & Gamble'), col = c('red', 'blue'), lty = c(1,1))
legend(x = 1000, legend = c('Coca Cola', 'Procter & Gamble'), col = c('red', 'blue'), lty = c(1,1))
legend(x = 10, legend = c('Coca Cola', 'Procter & Gamble'), col = c('red', 'blue'), lty = c(1,1))
plot(cocaCola$StockPrice ~ cocaCola$Date, col = 'red' ,xlab = 'Stock Price', ylab = 'Time', type = 'l', main = 'Coca Cola Stock Price Trend')
lines(pg$StockPrice ~ pg$Date, col = 'blue')
legend(x = 1000, legend = c('Coca Cola', 'Procter & Gamble'), col = c('red', 'blue'), lty = c(1,1))
abline(v = as.Date (c('2000-03-01')), lwd = 2)
legend(x = 500, legend = c('Coca Cola', 'Procter & Gamble'), col = c('red', 'blue'), lty = c(1,1))
legend(x = 100, y = 5, legend = c('Coca Cola', 'Procter & Gamble'), col = c('red', 'blue'), lty = c(1,1))
abline(v = as.Date (c('2000-03-01')), lwd = 2)
plot(cocaCola$StockPrice ~ cocaCola$Date, col = 'red' ,xlab = 'Stock Price', ylab = 'Time', type = 'l', main = 'Coca Cola Stock Price Trend')
lines(pg$StockPrice ~ pg$Date, col = 'blue')
legend(x = 100, y = 5, legend = c('Coca Cola', 'Procter & Gamble'), col = c('red', 'blue'), lty = c(1,1))
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
lines(pg$Date[301:432], pg$StockPrice[301:432], col = 'orange')
lines(boeing$Date[301:432], boeing$StockPrice[301:432], col = 'green')
lines(ge$Date[301:432], ge$StockPrice[301:432], col = 'blue')
lines(ibm$Date[301:432], ibm$StockPrice[301:432], col = 'black')
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
plot(cocaCola$Date[301:432], cocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
lines(pg$Date[301:432], pg$StockPrice[301:432], col = 'orange')
lines(boeing$Date[301:432], boeing$StockPrice[301:432], col = 'green')
lines(ge$Date[301:432], ge$StockPrice[301:432], col = 'blue')
lines(ibm$Date[301:432], ibm$StockPrice[301:432], col = 'black')
abline(v = as.Date (c('1997-09-01', '1997-11-01')), lwd = 2)
abline(v = as.Date(c('2004-01-01', '2005-12,31')), lwd = 2)
abline(v = as.Date(c('2004-01-01', '2005-12-31')), lwd = 2)
tapply(ibm$StockPrice, months(ibm$Date), mean, na.rm = TRUE)
sort(tapply(ibm$StockPrice, months(ibm$Date), mean, na.rm = TRUE))
sort(tapply(ibm$StockPrice, months(ibm$Date), mean, na.rm = TRUE)) > mean(ibm$StockPrice)
tapply(ge$StockPrice, months(ge$Date), mean, na.rm = TRUE)
tapply(cocaCola$StockPrice, months(cocaCola$Date), mean, na.rm = TRUE)
sort(tapply(ge$StockPrice, months(ge$Date), mean, na.rm = TRUE))
sort(tapply(cocaCola$StockPrice, months(cocaCola$Date), mean, na.rm = TRUE))
sort(tapply(boeing$StockPrice, months(boeing$Date), mean, na.rm = TRUE))
sort(tapply(pg$StockPrice, months(pg$Date), mean, na.rm = TRUE))
sort(tapply(pg$StockPrice, months(pg$Date) %in% ('January', 'December'), mean, na.rm = TRUE))
sort(tapply(pg$StockPrice, months(pg$Date), mean, na.rm = TRUE))
#4.1
sort(tapply(ibm$StockPrice, months(ibm$Date), mean, na.rm = TRUE)) > mean(ibm$StockPrice)
#4.2
sort(tapply(ge$StockPrice, months(ge$Date), mean, na.rm = TRUE))
sort(tapply(cocaCola$StockPrice, months(cocaCola$Date), mean, na.rm = TRUE))
#4.3
sort(tapply(boeing$StockPrice, months(boeing$Date), mean, na.rm = TRUE))
sort(tapply(pg$StockPrice, months(pg$Date), mean, na.rm = TRUE))
