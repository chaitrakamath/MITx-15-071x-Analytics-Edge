Hitters = na.omit(Hitters)
dim(Hitters)
sum(is.na(Hitters))
library(leaps)
install.packages('leap')
library(leap)
install.packages('leaps')
library(leaps)
?regsubsets
regfit.full = regsubsets(Salary~., data = Hitters)
summary(regfit.full)
regfit.full = regsubsets(Salary~., data = Hitters, nvmax = 19)
summary(regfit.full)
refit.summary = summary(regfit.full)
regfit.summary = summary(regfit.full)
names(regfit.summary)
regfit.summary$rss
regfit.summary$adjr2
regfit.summary$rsq
par(mfrow = c(2, 2))
plot(regfit.summary$rss, xlab = 'Number of variables', ylab = 'RSS', type = 'l')
plot(regfit.summary$adjr2, xlab = 'Number of variables', ylab = 'RSS', type = 'l')
which.max(regfit.summary$adjr2)
points(11, regfit.summary$adjr2[11], col = 'red', cex = 2, pch = 20)
plot(regfit.summary$cp, xlab = 'Number of variables', ylab = 'Cp', type = 'l')
which.min(regfit.summary$cp)
points(10, regfit.summary$cp[10], col = 'red', cex = 2, pch = 20)
plot(regfit.summary$bic, xlab = 'Number of variables', ylab = 'BIC', type = 'l')
which.min(regfit.summary$bic)
points(6, regfit.summary$bic[6], col = 'red', cex = 2, pch = 20)
plot(regfit.full, scale = 'rsq')
plot(regfit.full, scale = 'r2')
?plot.regsubsets
plot(regfit.full, scale = 'r2')
par(mfrow = c(1, 1))
plot(regfit.full, scale = 'r2')
plot(regfit.full, scale = 'adjr2')
plot(regfit.full, scale = 'cp')
plot(regfit.full, scale = 'Cp')
plot(regfit.full, scale = 'bic')
coef(regit.full)
coef(regfit.full)
coef(regfit.full, id = 19)
coef(regfit.full, id = 6)
regfit.fwd = regfit(Salary~., data = Hitters, method = 'forward')
regfit.fwd = regsubsets(Salary~., data = Hitters, method = 'forward')
summary(regfit.fwd)
names(regfit.fwd)
regfit.fwd$nullrss
regfit.fwd$nvmax
regfit.fwd = regsubsets(Salary~., data = Hitters, method = 'forward', nvmax = 19)
regfit.fwd$rss
regfit.fwd$d
regfit.fwd$first
regfit.fwd$last
regfit.fwd$nbest
regfit.fwd$call
regfit.fwd$nn
coef(regit.full, id = 7)
coef(regfit.full, id = 7)
coef(regfit.fwd, id = 7)
regfit.bwd = regsubsets(Salary~., data = Hitters, method = 'backward', nvmax = 19)
coef(regfit.full, id = 7)
coef(regfit.fwd, id = 7)
coef(regfit.bwd, id = 7)
coef(regfit.fwd, id = 1)
coef(regfit.fwd, id = 2)
coef(regfit.fwd, id = 3)
coef(regfit.full, id = 3)
coef(regfit.full, id = 5)
coef(regfit.fwd, id = 5)
coef(regfit.fwd, id = 6)
coef(regfit.fwd, id = 6)
set.seed(1)
train = sample(c(TRUE, FALSE), nrow(Hitters))
train = sample(c(TRUE, FALSE), nrow(Hitters), replace = 'TRUE')
train = sample(c(TRUE, FALSE), nrow(Hitters), replace = TRUE)
head(train)
test = !train
head(test)
regfit.best = regsubsets(Salary~., data = Hitters[train, ], nvmax = 19)
summary(regfit.best)
test.mat = model.matrix(Salary~., data = Hitters[test,])
test.mat
head(test.mat)
dimnames(test.mat)
val.errors = rep(NA, 19)
for (i in 1:19){
coefi = coef(regfit.best, i)
pred = test.mat[, names(coefi)] %*% coefi
val.error[i] = mean((Hitters$Salary[test] - pred) ^ 2)
}
for (i in 1:19){
coefi = coef(regfit.best, i)
pred = test.mat[, names(coefi)] %*% coefi
val.errors[i] = mean((Hitters$Salary[test] - pred) ^ 2)
}
val.errors
which.min(val.errors)
coef(regfit.best, id = 10)
regfit.best = regsubsets(Salary~., data = Hitters, nvmax = 19)
coef(regfit.best, id = 10)
k = 10
set.seed(1)
folds = sample(1:k, nrow(Hitters), replace = TRUE)
head(folds)
length(folds)
cv.errors = matrix(NA, k, 19, dimnames = list(NULL, paste(1:19))
)
head(cv.errors)
dim(cv.errors)
for (j in 1:k){
regfit.best = regsubsets(Salary~., data = Hitters[folds = !j,], nvmax = 19)
for (i in 1:19){
pred = predict(regfit.best, Hitters[fold == j,], id = i)
cv.errors[j, i] = mean((Hitters$Salary[folds == j] - pred) ^ 2)
}
}
for (j in 1:k){
regfit.best = regsubsets(Salary~., data = Hitters[folds != j,], nvmax = 19)
for (i in 1:19){
pred = predict(regfit.best, Hitters[folds == j,], id = i)
cv.errors[j, i] = mean((Hitters$Salary[folds == j] - pred) ^ 2)
}
}
for(j in 1:k){    best.fit = regsubsets (Salary ∼.,data = Hitters[folds != j , ],￼￼nvmax =19) for(i in 1:19){                                                ￼+                                                    +                                                    + +} +}
for(j in 1:k){    best.fit = regsubsets (Salary ∼.,data = Hitters[folds != j , ],￼￼nvmax =19) for(i in 1:19){                                                ￼+                                                    +                                                    + +} +}
for(j in 1:k){    best.fit = regsubsets (Salary ∼.,data = Hitters[folds != j , ],￼￼nvmax                            9) for(i in 1:19){                                                ￼+                                                    +                                                    + +} +}
for (j in 1:k){
best.fit = regularsubsets(Salary~., data = Hitters[folds != j, ], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, Hitters[folds == j,], id = i)
cv.errors[j,i] = mean((Hitters$Salary[folds == j] - pred) ^2)
}
}
for (j in 1:k){
+ best.fit = regsubsets(Salary~., data = Hitters[folds != j, ], nvmax = 19)
+ for (i in 1:19){
+ pred = predict(best.fit, Hitters[folds == j,], id = i)
+ cv.errors[j,i] = mean((Hitters$Salary[folds == j] - pred) ^2)
+           }
+      }
for (j in 1:k){+ best.fit = regsubsets(Salary~., data = Hitters[folds != j, ], nvmax = 19)
+ for (i in 1:19){
+ pred = predict(best.fit, Hitters[folds == j,], id = i)
+ cv.errors[j,i] = mean((Hitters$Salary[folds == j] - pred) ^2)
+           }
+      }
for (j in 1:k){                                                                                                 + best.fit = regsubsets(Salary~., data = Hitters[folds != j, ], nvmax = 19)
+ for (i in 1:19){
+ pred = predict(best.fit, Hitters[folds == j,], id = i)
+ cv.errors[j,i] = mean((Hitters$Salary[folds == j] - pred) ^2)
+           }
+      }
for (j in 1:k){
best.fit = regularsubsets(Salary~., data = Hitters[folds != j, ], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, Hitters[folds == j,], id = i)
cv.errors[j,i] = mean((Hitters$Salary[folds == j] - pred) ^2)
}
}
for (j in 1:k){
best.fit = regsubsets(Salary~., data = Hitters[folds != j, ], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, Hitters[folds == j,], id = i)
cv.errors[j,i] = mean((Hitters$Salary[folds == j] - pred) ^2)
}
}
install.packages('glmnet')
library(glmnet)
dim(Hitters)
model.matrix(Salary~., Hitters)
x = model.matrix(Salary~., Hitters)[,-1]
head(x)
y = Hitters$Salary
grid=10^seq(10,-2,length=100)
head(grid)
head((10,-2,length=100))
(10,-2,length=100)
head(seq(10,-2,length=100))
?seq
head(seq(10,-2,length=10))
head(seq(10,-2,length=25))
head(grid)
ridge.mod = glmnet(x,y,alpha = 0, lambda = grid)
seq(-2,10,length = 10)
seq(-2,10,length = 10)
seq(10,-2,length = 10)
tail(grid)
dim(coef(ridge.mod))
ridge.mod$lambda[50]
coef(ridge.mod, id = 50)
coef(ridge.mod)[50]
coef(ridge.mod)[,50]
sum(coef(ridge.mod)[,50])
sum((coef(ridge.mod)[,50])^2)
sqrt(sum((coef(ridge.mod)[,50])^2))
sqrt(sum((coef(ridge.mod)[-1,50])^2))
ridge.mod$lambda[,70]
ridge.mod$lambda[70]
coef(ridge.mod)[,70]
sqrt((coef(ridge.mod)[-1,70])^2)
sqrt(sum((coef(ridge.mod)[-1,70])^2))
predict(ridge.mod, s = 50, type = 'coefficients')[1:20,]
set.seed(1)
?sample
train = sample(1:nrow(x), nrow(x)/2)
test = !train
head(train)
head(test)
test = -train
head(test)
length(x)
length(train)
length(test)
nrow(x)
y.test = y[test]
ridge.mod = glmnet(x[train,], y[train,], alpha = 0, lambda = grid, tresh = 1e-12)
ridge.mod = glmnet(x[train,], y[train,], alpha = 0, lambda = grid, thresh = 1e-12)
ridge.mod = glmnet(x[train,], y[train], alpha = 0, lambda = grid, thresh = 1e-12)
ridge.pred = predict(ridge.mod, s = 4, newx = x[test,])
mean((ridge.pred - y.test)^2)
set.seed(1)
cv.out = cv.glmnet(x[train,], y[train], alpha = 0)
plot(cv.out)
bestlam = cv.out$lambda.min
bestlam
ridge.pred = predict(ridge.mod, s = bestlam, newx = x[test,])
mean((ridge.pred - y.test) ^ 2)
out = glmnet(x,y,alpha = 0)
predict(out, type = 'coefficients', s = bestlam)[1:20,]
lasso.mod = glmnet(x,y,alpha = 1)
lasso.mod = glmnet(x[train,],y[train],alpha = 1)
plot(lasso.mod)
set.seed(1)
cv.out = cv.glmnet(x[train,], y[train], alpha = 1)
plot(cv.out)
bestlam = cv.out$lamda.min
bestlam
cv.out=cv.glmnet(x[train ,],y[train],alpha=1)
bestlam=cv.out$lambda .min
bestlam=cv.out$lambda.min
bestlam
plot(cv.out)
cv.out = cv.glmnet(x[train,], y[train], alpha = 1)
plot(cv.out)
cv.out = cv.glmnet(x[train,], y[train], alpha=1)
set.seed(1)
cv.out = cv.glmnet(x[train,], y[train], alpha = 1)
bestlam = cv.out$lambda.min
bestlam
set.seed(1)
cv.out = cv.glmnet(x[train,], y[train], alpha = 1)
bestlam=cv.out$lambda.min
bestlam
lasso.pred = predict(lasso.mod, s = bestlam, newx = x[test,])
mean((lasso.pred - y.test) ^2)
out = glmnet(x,y,alpha = 1, lambda = grid)
lasso.coef = predict(out, type = 'coefficients', s = bestlam)[1:20,]
lasso.coef
install.packages('pls')
library(pls)
set.seed(2)
pcr.fit = pcr (Salary ~., data = Hitters, scale = TRUE, validation = 'CV')
summary(pcr.fit)
validationplot(pcr.fit, type = 'MSEP')
validationplot(pcr.fit, val.type = 'MSEP')
set.seed (1)
pcr.fit = pcr(Salary~., data = Hitters, subset = train, scale = TRUE)
pcr.fit = pcr(Salary~., data = Hitters, subset = train, scale = TRUE, validation = 'CV')
validationplot(pcr.fit, val.type = 'MSEP')
pcr.pred = predict(pcr.fit, x[test,], ncomp = 7)
mean((pcr.pred - y.test) ^2)
pcr.fit = pcr(y~x, scale = TRUE, ncomp = 7)
summary(pcr.fit)
names(cv.out)
?cv.glmnet
getwd()
setwd('/Users/admin/Documents/Coursera/AnalyticsEdge-edX/Week1/Assignment/Part4')
getwd()
setwd('/Users/admin/Documents/Coursera/AnalyticsEdge-edX/Week2/Lecture')
getwd()
wine = read.csv('wine.csv')
str(wine)
summary(wine)
model1 = lm(Price ~ AGST, data = wine)
summary(model1)
model1$residuals
SSE = sum(model1$residuals ^ 2)
SSE
model1 = lm (Price ~ AGST + HarvestRain, data = wine)
summary(model1)
SSE = sum(model1$residuals ^ 2)
SSE
model3 = lm (Price ~ ., data = wine)
summary(model3)
SSE = sum(model3$residuals ^ 2)
SSE
model4 = lm (Price ~ HarvestRain, data = wine)
summary(model4)
model4 = lm (Price ~ HarvestRain + WinterRain, data = wine)
summary(model4)
summary(model3)
model4 = lm (Price ~ AGST + HarvestRain + WinterRain + Age, data = wine)
summary(model4)
model5 = lm (Price ~ HarvestRain + WinterRain, data = wine)
summary(model5)
cor(wine$WinterRain, wine$Price)
cor(wine$Age, wine$FrancePop)
cor(wine)
model6 = lm (Price ~ AGST + HarvestRain + WinterRain, data = wine)
summary(model6)
cor (wine$HarvestRain, wine$WinterRain)
wineTest = read.csv('wine_test.csv')
str(wineTest)
predict_test = predict(model6, newdata = wineTest)
predict_test
SSETest = sum((wineTest$Price - predictTest) ^ 2)
SSETest = sum((wineTest$Price - predict_test) ^ 2)
SSTTest = sum((wineTest$Price - mean(wine$Price)) ^ 2)
1 - SSETest / SSTTest
baseball = read.csv('baseball.csv')
str(baseball)
moneyball = subset(baseball, Year < 2002)
str(moneyball)
moneyball$RD = moneyball$RS - moneyball$RA
str(moneyball)
plot(W ~ RD, data = moneyball)
winsReg = lm (Wins ~ RD, data = moneyball)
winsReg = lm (W ~ RD, data = moneyball)
summary(winsReg)
RD = 713 - 614
RD
str(moneyball)
rd = 99
wins = 80.881375 + 0.105766 * 99
wins
runsRed = lm (RS ~ OBP + SLG + BA, data = moneyball)
summary(runsRed)
runsRed = lm (RS ~ OBP + SLG, data = moneyball)
summary(runsRed)
runsRed = lm (RS ~ OBP + BA, data = moneyball)
summary(runsRed)
runsRed = lm (RS ~ OBP + SLG, data = moneyball)
summary(runsRed)
runsAll = lm(RA ~ OOBP + OSLG, data = moneyball)
summary(runsAll)
summary(runsRed)
-804.63 + 2737.77 * 0.311 + 1584.91 * 0.405
summary(runsAll)
-837.38 + 2913.60 * 0.297 + 1514.29 * 0.370
summary(runsRed)
-804.63 + 2737.77 * 0.391 + 1584.91 * 0.450
-804.63 + 2737.77 * 0.369 + 1584.91 * 0.374
-804.63 + 2737.77 * 0.313 + 1584.91 * 0.447
-804.63 + 2737.77 * 0.361 + 1584.91 * 0.500
teamRank = c(1,2,3,3,4,4,4,4,5,5)
wins2012 = c(94, 88, 95, 88, 93, 94, 98, 97, 93, 94)
cor(teamRank, wins2012)
wins2013 = c(97, 97, 92, 93, 92, 96, 94, 96, 92, 90)
cor(teamRank, wins2013)
nba = read.csv ('nba_train')
nba = read.csv ('nba_train.csv')
str(nba)
table(nba$W, nba$Playoffs)
plot (W ~ Playoffs, data = nba)
nba$PTSDiff = nba$PTS - nba$oppPTS
plot (W ~ PTSDiff, data = nba)
winsReg = lm (W ~ PTSDiff, data = nba)
summary(winsReg)
pointsReg = lm (PTS ~ X2PA + X3PA + FTA + AST + ORB + DRB + TOV + STL + BLK, data = nba)
summary (pointsReg)
pointsReg$Residuals
pointsReg$residuals
sse = sum((pointsReg$residuals) ^ 2)
sse
rmse = sqrt(sse / nrow(nba))
rmse
mean(nba$PTS)
summary (pointsReg)
pointsReg = lm (PTS ~ X2PA + X3PA + FTA + AST + ORB + DRB + STL + BLK, data = nba)
summary(pointsReg)
sse = sum((pointsReg$residuals) ^ 2)
sse
pointsReg = lm (PTS ~ X2PA + X3PA + FTA + AST + ORB + TOV + STL + BLK, data = nba)
summary(pointsReg)
pointsReg = lm (PTS ~ X2PA + X3PA + FTA + AST + ORB + STL + BLK, data = nba)
summary(pointsReg)
pointsReg = lm (PTS ~ X2PA + X3PA + FTA + AST + ORB + STL, data = nba)
summary(pointsReg)
sse = sum(pointsReg$residuals)
sse
sse = sum(pointsReg$residuals ^ 2)
sse
rmse = sqrt(sse / nrow(nba))
rmse
nbaTest = read.csv('nba_test.csv')
str(nbaTest)
pointsPred = predict (pointsReg, newdata = nbaTest)
SSE = sum((pointsPred - nbaTest$PTS) ^ 2)
SST = sum((pointsPred - mean(nba))^2)
head(pointsPred)
SST = sum((pointsPred - mean(nba$PTS))^2)
r2 = 1 - SSE / SST
r2
rmse = sqrt(SSE / nrow(nbaTest))
rmse
getwd()
setwd('/Users/admin/Documents/Coursera/AnalyticsEdge-edX/Week1/Assignment/Part3')
getwd()
ls()
cps = read.csv('CPSData.csv')
str(cps)
summary(cps)
summary(cps$Industry)
sort(table(cps$Region))
names(cps)
sort(table(cps$State))
table(cps$Citizenship)
(116639 + 7073) / nrow(cps)
table(cps$Ethnicity)
names(cps)
table(cps$Race)
table(cps$Race, cps$Hispanic)
summary(cps)
table(cps$Region, is.na(cps$Married))
table(cps$Sex, is.na(cps$Married))
table(cps$Age, is.na(cps$Married))
table(cps$State, is.na(cps$MetropolitanArea))
names(cps)
table(cps$State, is.na(cps$MetroAreaCode))
table(cps$Region, is.na(cps$MetroAreaCode))
prop.table(regMetro)
regMetro = table(cps$Region, is.na(cps$MetroAreaCode))
regMetro
prop.table(regMetro)
table(is.na(cps$MetroAreaCode))
table(cps$State, is.na(cps$MetroAreaCode))
tapply(is.na(cps$MetroAreaCode), cps$State, mean)
tapply(is.na(cps$MetroAreaCode), cps$State, mean * 100)
tapply(is.na(cps$MetroAreaCode), cps$State, mean)
sort(tapply(is.na(cps$MetroAreaCode), cps$State, mean))
prop.table(table(is.na(cps$MetroAreaCode, cps$State)))
prop.table(table(is.na(cps$MetroAreaCode), cps$State))
sort(tapply(!is.na(cps$MetroAreaCode), cps$State, mean))
table(cps$State, is.na(cps$MetroAreaCode))
sort(tapply(is.na(cps$MetroAreaCode), cps$State, mean))
metroAreaCodes = read.csv('MetroAreaCodes.csv')
summary(metroAreaCodes)
str(metroAreaCodes)
countryCodes = read.csv('CountryCodes.csv')
summary(countryCodes)
str(countryCodes)
cps = merge(cps, metroAreaCodes, by.x = 'MetroAreaCode', by.y = 'Code', all.x = TRUE)
str(cps)
summary(cps)
names(cps)
sort(table(cps$MetroArea))
table(cps$MetroArea)
sort(table(cps$MetroArea))
which.max(table(cps$MetroArea))
which.max(count(cps$MetroArea))
which.max(table(cps$MetroArea))
cps$MetroArea[which.max(table(cps$MetroArea))]
cps[MetroArea == 'Atlanta-Sandy Springs-Marietta, GA', ]
cps[cps$MetroArea == 'Atlanta-Sandy Springs-Marietta, GA', ]
nrow(cps[cps$MetroArea == 'Atlanta-Sandy Springs-Marietta, GA', ])
nrow(cps[cps$MetroArea == 'Baltimore-Towson, MD', ])
nrow(cps[cps$MetroArea == 'Boston-Cambridge-Quincy, MA-NH', ])
nrow(cps[cps$MetroArea == 'San Francisco-Oakland-Fremont, CA', ])
sort(tapply(cps$Hispanic, cps$MetroArea, mean))
sort(tapply(cps$Race == 'Asian', cps$MetroArea, mean))
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, na.rm = TRUE))
sort(tapply(cps$Education == "No high school diploma", cps$MetroArea, mean, na.rm = TRUE))
names(cps)
names(countryCodes)
cps = merge(cps, countryCodes, by.x = 'CountryOfBirthCode', by.y = 'Code', all.x = TRUE)
str(cps)
summary(cps)
names(cps)
unique(cps$Country)
sort(table(cps$Country))
head(cps)
tapply(cps$Country != 'United States', cps$MetroArea == 'New York-Northern New Jersey-Long Island, NY-NJ-PA', mean)
tapply(cps$Country != 'United States', cps$MetroArea == 'New York-Northern New Jersey-Long Island, NY-NJ-PA', mean, na.rm = TRUE)
sort(tapply (cps$Country == 'India', cps$MetroArea, na.rm = TRUE ))
sort(tapply (cps$Country == 'India', cps$MetroArea, nrow, na.rm = TRUE ))
sort(tapply (cps$Country == 'India', cps$MetroArea, max, na.rm = TRUE))
sort(table (cps$Country == 'India', cps$MetroArea, na.rm = TRUE))
sort(table (cps$Country == 'India', cps$MetroArea))
which.max(table (cps$Country == 'India', cps$MetroArea))
cps$Country[345]
cps$MetroArea[345]
table(cps$Country, cps$MetroArea)
tapply(cps$Country, cps$MetroArea)
tapply(cps$Country, cps$MetroArea, freq)
tapply(cps$Country, cps$MetroArea, sum)
tapply(cps$Country, cps$MetroArea, length)
tapply(cps$Country == 'India', cps$MetroArea, length)
indiaSub = subset(cps, cps$Country == 'India')
head(indiaSub)
table(indiaSub$MetroArea)
sort(table(indiaSub$MetroArea))
sort(table(indiaSub$MetroArea))
which.max(indiaSub$MetroArea)
indiaSub$MetroArea[which.max(indiaSub$MetroArea)]
brazilSub = subset(cps, cps$Country == 'Brazil')
sort(table(brazilSub$MetroArea))
somaliaSub = subset(cps, cps$Country == 'Somalia')
sort(table(somaliaSub$MetroArea))
sort(table(cps$Country))
names(cps)
