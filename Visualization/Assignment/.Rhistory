table(stocksTest2$PositiveDec, predictTest2 > 0.5)
accuracy2 = (361 + 862) / (361 + 686 + 301 + 862)
accuracy2
table(stocksTest1$PositiveDec, predictTest1 > 0.5)
accuracy1 = (101 + 498) / (101 + 341 + 103 + 498)
accuracy1
head(clusterTest)
table(clusterTest)
stocksTrain1 = subset(stocksTrain, clusterTest == 1)
stocksTrain2 = subset(stocksTrain, clusterTest == 2)
stocksTrain3 = subset(stocksTrain, clusterTest == 3)
mean(stocksTrain1$PositiveDec)
mean(stocksTrain2$PositiveDec)
mean(stocksTrain3$PositiveDec)
stocksTrain1 = subset(stocksTrain, clusterTrain == 1)
stocksTrain2 = subset(stocksTrain, clusterTrain == 2)
stocksTrain3 = subset(stocksTrain, clusterTrain == 3)
mean(stocksTrain1$PositiveDec)
mean(stocksTrain2$PositiveDec)
mean(stocksTrain3$PositiveDec)
stocksTrain1 = subset(stocksTrain, clusterTrain == 1)
stocksTrain2 = subset(stocksTrain, clusterTrain == 2)
stocksTrain3 = subset(stocksTrain, clusterTrain == 3)
mean(stocksTrain1$PositiveDec)
mean(stocksTrain2$PositiveDec)
mean(stocksTrain3$PositiveDec)
#4.2
stockModel1 = glm(PositiveDec ~ ., data = stocksTrain1, family = binomial)
stockModel2 = glm(PositiveDec ~ ., data = stocksTrain2, family = binomial)
stockModel3 = glm(PositiveDec ~ ., data = stocksTrain3, family = binomial)
summary(stockModel1)
summary(stockModel2)
summary(stockModel3)
#4.3
stocksTest1 = subset(stocksTest, clusterTest == 1)
stocksTest2 = subset(stocksTest, clusterTest == 2)
stocksTest3 = subset(stocksTest, clusterTest == 3)
predictTest1 = predict(stockModel1, newdata = stocksTest1, type = 'response')
table(stocksTest1$PositiveDec, predictTest1 > 0.5)
accuracy1 = (30 + 774) / nrow(stocksTest1)
accuracy1
predictTest2 = predict(stockModel2, newdata = stocksTest2, type = 'response')
table(stocksTest2$PositiveDec, predictTest2 > 0.5)
accuracy2 = (388 + 757) / nrow(stocksTest2)
accuracy2
predictTest3 = predict(stockModel3, newdata = stocksTest3, type = 'response')
table(stocksTest3$PositiveDec, predictTest3 > 0.5)
accuracy3 = (49 + 13) / nrow(stocksTest3)
accuracy3
allPredictions = c(predictTest1, predictTest2, predictTest3)
allOutcomes = c(stocksTest1$PositiveDec, stocksTest2$PositiveDec, stocksTest3$PositiveDec)
table(allOutcomes, allPredictions > 0.5)
overallAccuracy = (467 + 1544) / nrow(allOutcomes)
overallAccuracy
nrow(allOutcomes)
overallAccuracy = (467 + 1544) / length(allOutcomes)
overallAccuracy
getwd()
setwd('/Users/admin/Documents/Coursera/AnalyticsEdge-edX/Week7/Lecture/')
getwd()
who = read.csv('WHO.csv')
str(who)
plot(who$FertilityRate ~ who$GNI)
install.packages('ggplot2')
install.packages('ggplot2')
library(ggplot2)
scatterplot = ggplot(who, aes (x = GNI, y = FertilityRate))
scatterplot + geom_point()
scatterplot + geom_line()
scatterplot + geom_point()
scatterplot + geom_point(color = 'blue', size = 3, shape = 17)
scatterplot + geom_point(color = 'darkred', size = 3, shape = 8)
scatterplot + ggtitle('Fertility Rate vs. Gross National Income')
scatterplot + geom_point(color = 'darkred', size = 3, shape = 8) + ggtitle('Fertility Rate vs. Gross National Income')
fertilityGNIPlot = scatterplot + geom_point(color = 'darkred', size = 3, shape = 8) + ggtitle('Fertility Rate vs. Gross National Income')
pdf('FertilityGNIPlot.pdf')
print(fertilityGNIPlot)
dev.off()
scatterplot + geom_point(color = 'darkred', size = 3, shape = 15)
ggplot(who, aes(x = GNI, y = FertilityRate, col = Region)) + geom_point()
ggplot(who, aes(x = GNI, y = FertilityRate, col = LifeExpectancy)) + geom_point()
ggplot(who, aes(x = FertilityRate, y = Under15)) + geom_point()
ggplot(who, aes(x = log(FertilityRate), y = Under15)) + geom_point()
model = lm(Under15 ~ log(FertilityRate), data = who)
summary(model)
ggplot(who, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = 'lm')
ggplot(who, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = 'lm', level = 0.99)
ggplot(who, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = 'lm', se = FALSE)
ggplot(who, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = 'lm', color = 'orange')
ggplot(who, aes(x = FertilityRate, y = Under15, color = Region)) + geom_point() + add_scale_color_brewer (palette = 'Dark2')
ggplot(who, aes(x = FertilityRate, y = Under15, color = Region)) + geom_point() + scale_color_brewer (palette = 'Dark2')
getwd()
setwd('/Users/admin/Documents/Coursera/AnalyticsEdge-edX/Week7/Lecture/')
getwd()
mvt = read.csv('mvt.csv', stringsAsFactors = FALSE)
str(mvt)
mvt$Date = strptime(mvt$Date, format = '%m/%d/%y %H:%M')
mvt$Weekday = weekdays(mvt$Date)
mvt$Hour = mvt$Date$Hour
str(mvt)
mvt$Hour = mvt$Date$Hour
str(mvt)
head(mvt$Date$Hour)
mvt$Hour = mvt$Date$hour
str(mvt)
table(mvt$Weekday)
weekdayCounts = as.data.frame(table(mvt$Weekday))
str(weekdayCounts)
library(ggplot2)
ggplot(weekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group = 1))
weekdayCounts$Var1 = factor(weekdayCounts$Var1, ordered = TRUE, levels = c('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'))
ggplot(weekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group = 1))
ggplot(weekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group = 1)) + xlab('Day of the week') + ylab('Total Motor Theft')
+ ylab('Total Motor Vehicle Theft')
ggplot(who, aes(x = Var1, y = Freq)) + geom_line(aes(group = 1), linetype = 2) + xlab('Day of the week')
+ ylab('Total Motor Vehicle Theft')
ggplot(weekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group = 1), linetype = 2) + xlab('Day of the week') +
ylab('Total Motor Vehicle Theft')
ggplot(weekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group = 1), alpha = 0.3) + xlab('Day of the week') +
ylab('Total Motor Vehicle Theft')
table(mvt$Weekday, mvt$Hour)
dayHourCounts = as.data.frame(table(mvt$Weekday, mvt$Hour))
str(dayHourCounts)
dayHourCounts$Hour = as.numeric(as.character(dayHourCounts$Var2))
str(dayHourCounts)
ggplot(dayHourCounts, aes (x = Hour, y = Freq)) + geom_line(aes(group = Var1))
ggplot(dayHourCounts, aes (x = Hour, y = Freq, col = Var1)) + geom_line(aes(group = Var1))
ggplot(dayHourCounts, aes (x = Hour, y = Freq)) + geom_line(aes(group = Var1, color = Var1))
ggplot(dayHourCounts, aes (x = Hour, y = Freq)) + geom_line(aes(group = Var1, color = Var1), size = 2)
dayHourCounts$Var1 = factor(dayHourCounts$Var1, ordered = TRUE, levels = c('Monday', 'Tuesday', 'Wednesday',
'Thursday', 'Friday', 'Saturday',
'Sunday'))
ggplot(dayHourCounts, aes(x = Hour, y= Var1)) + geom_tile(aes(fill = Freq))
ggplot(dayHourCounts, aes(x = Hour, y= Var1)) + geom_tile(aes(fill = Freq)) + scale_fill_gradient(name = 'Total
MV Thefts') + theme (axis.title.y = element_blank)
ggplot(dayHourCounts, aes(x = Hour, y= Var1)) + geom_tile(aes(fill = Freq)) + scale_fill_gradient(name = 'Total
MV Thefts') + theme (axis.title.y = element_blank())
ggplot(dayHourCounts, aes(x = Hour, y= Var1)) + geom_tile(aes(fill = Freq)) + scale_fill_gradient(name = 'Total
MV Thefts', low = 'white', high = 'red') + theme (axis.title.y = element_blank())
MV Thefts', low = 'white', high = 'black') + theme (axis.title.y = element_blank())
ggplot(dayHourCounts, aes(x = Hour, y= Var1)) + geom_tile(aes(fill = Freq)) + scale_fill_gradient(name = 'Total
MV Thefts', low = 'white', high = 'black') + theme (axis.title.y = element_blank())
install.packages('maps')
install.packages('ggmpap')
install.packages('ggmap')
library(maps)
library(ggmap)
chicago = get_map(location = 'chicago', zoom = 11)
ggmap(chicago)
names(mvt)
ggmap(chicago) + geom_point(data = mvt [1:100, ], aes(x = Longitude, y = Latitude))
latlongCounts = as.data.frame(table(round(mvt$Longitude, 2), round(mvt$Latitude, 2)))
str(latlongCounts)
latlongCounts$Long = as.numeric(as.character(latlongCounts$Var1))
latlongCounts$Lat = as.numeric(as.character(latlongCounts$Var2))
ggmap(chicago) + geom_points(data = latlongCounts, aes (x = Long, y = Lat, color = Freq, size = Freq))
ggmap(chicago) + geom_point(data = latlongCounts, aes (x = Long, y = Lat, color = Freq, size = Freq))
ggmap(chicago) + geom_point(data = latlongCounts, aes (x = Long, y = Lat, color = Freq, size = Freq)) +
scale_color_gradient(low = 'yellow', high = 'red')
ggmap(chicago) + geom_tile(data = latlongCounts, aes (x = Long, y = Lat, alpha = Freq)), fill = 'red'
ggmap(chicago) + geom_tile(data = latlongCounts, aes (x = Long, y = Lat, alpha = Freq), fill = 'red')
latlongCounts2 = subset(latlongCounts, Freq > 0)
ggmap(chicago) + geom_tile(data = latlongCounts2, aes (x = Long, y = Lat, alpha = Freq), fill = 'red')
nrow(latlongCounts) - nrow(latlongCounts2)
getwd()
setwd('/Users/admin/Documents/Coursera/AnalyticsEdge-edX/Week7/Lecture/')
getwd()
nurders = read.csv('murders.csv')
murders = read.csv('murders.csv')
str(murders)
statesMap = map_data('state')
str(statesMap)
ggplot(statesMap, aes(x = long, y = lat, group = group)) + geom_polygon(fill= 'white', color = 'black')
murders$region = tolower(murders$state)
murders$region = tolower(murders$State)
murderMap = merge(statesMap, murders, by = region)
murderMap = merge(statesMap, murders, by = 'region')
str(murderMap)
ggplot(murderMap, aes (x = long, y = lat, group = group, fill = Murders)) + geom_polygon(color = 'black')+
scale_fill_gradient(low = 'black', high = 'red', guide = 'legend')
ggplot(murderMap, aes (x = long, y = lat, group = group, fill = Population)) + geom_polygon(color = 'black')+
scale_fill_gradient(low = 'black', high = 'red', guide = 'legend')
murderMap$murderRate = murderMap$Murders / murderMap$Population * 100000
ggplot(murderMap, aes (x = long, y = lat, group = group, fill = murderRate)) + geom_polygon(color = 'black')+
scale_fill_gradient(low = 'black', high = 'red', guide = 'legend')
ggplot(murderMap, aes (x = long, y = lat, group = group, fill = murderRate)) + geom_polygon(color = 'black')+
scale_fill_gradient(low = 'black', high = 'red', guide = 'legend', limits = c(0,10))
ggplot(murderMap, aes (x = long, y = lat, group = group, fill = GunOwnership)) + geom_polygon(color = 'black')+
scale_fill_gradient(low = 'black', high = 'red', guide = 'legend', limits = c(0,10))
ggplot(murderMap, aes (x = long, y = lat, group = group, fill = GunOwnership)) + geom_polygon(color = 'black')+
scale_fill_gradient(low = 'black', high = 'red', guide = 'legend')
getwd()
setwd('/Users/admin/Documents/Coursera/AnalyticsEdge-edX/Week7/Recitation/')
getwd()
library(ggplot2)
intl = read.csv('intl.csv')
str(intl)
ggplot(intl, aes(x = Region, y = PercentOfIntl)) + geom_bar(stat = 'identity') + geom_text(aes(label = PercentOfIntl))
intl = transform(intl, Region = reorder(Region, -PercentOfIntl))
str(intl)
intl$PercentOfIntl = intl$PercentOfIntl * 100
ggplot(intl, aes(x = Region, y = PercentOfIntl)) +
geom_bar(aes(stat = 'identity', fill = 'dark blue')) +
geom_text(aes(label = PercentOfIntl), vjust = -0.4) +
ylab ('Percent of International Students') +
theme(axis.title.x = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(intl, aes(x = Region, y = PercentOfIntl)) +
geom_bar(stat = 'identity', fill = 'dark blue') +
geom_text(aes(label = PercentOfIntl), vjust = -0.4) +
ylab ('Percent of International Students') +
theme(axis.title.x = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1))
library(ggmap)
intlall = read.csv('intlall.csv', stringsAsFactors = FALSE)
head(intlall)
intlall[is.na(intlall)] = 0
head(intlall)
worldMap = map_data('world')
str(worldMap)
unique(worldMap$group)
worldMap = merge(worldMap, intlall, by.x = 'region', by.y = 'Citizenship')
str(worldMap)
ggplot(worldMap, aes(x = long, y = lat, group = group))+
geom_polygon(fill = 'white', color = 'black') +
coord_map('mercator')
worldMap = world_map[order(worldMap$group, worldMap$order), ]
worldMap = worldMap[order(worldMap$group, worldMap$order), ]
ggplot(worldMap, aes(x = long, y = lat, group = group))+
geom_polygon(fill = 'white', color = 'black') +
coord_map('mercator')
table(intlall$Citizenship)
intlall$Citizenship[intlall$Citizenship == 'China (People's Republic Of)'] = 'China'
intlall$Citizenship[intlall$Citizenship == "China (People's Republic Of)"] = 'China'
table(intlall$Citizenship)
worldMap = map(map_data('world'), intlall, by.x = 'region', by.y = 'Citizenship')
worldMap = map_data('world')
worldMap = map(worldMap, intlall, by.x = 'region', by.y = 'Citizenship')
str(worldMap)
worldMap = map(worldMap, intlall, by.x = 'region', by.y = 'Citizenship')
worldMap = merge(worldMap, intlall, by.x = 'region', by.y = 'Citizenship')
worldMap = worldMap[order(worldMap$group, worldMap$order), ]
ggplot(worldMap, aes(x = long, y = lat, group = group))+
geom_polygon(aes(fill = Total), color = 'black')+
coord_map('mercator')
ggplot(worldMap, aes(x = long, y = lat, group = group))+
geom_polygon(aes(fill = Total), color = 'black')+
coord_map('ortho', orientation = c(20, 30, 0))
ggplot(worldMap, aes(x = long, y = lat, group = group))+
geom_polygon(aes(fill = Total), color = 'black')+
coord_map('ortho', orientation = c(-37, 175, 0))
install.packages('reshape2')
install.packages("reshape2")
install.packages('reshape2')
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
library(ggplot2)
household = read.csv('household.csv')
household = read.csv('households.csv')
str(household)
household[, 1:2]
head(melt(household, id = 'Year'))
household[, 1:3]
melt(household, id = 'Year')[1:10, 3]
melt(household, id = 'Year')[1:10,]
ggplot(melt(household, id = 'Year'), aes(x = Year, y = value, color = variable))+
geom_lines(size = 2) + geom_points(size = 5) + ylab('Percentage of households')
ggplot(melt(household, id = 'Year'), aes(x = Year, y = value, color = variable))+
geom_line(size = 2) + geom_point(size = 5) + ylab('Percentage of households')
getwd()
setwd('/Users/admin/Documents/Coursera/AnalyticsEdge-edX/Week7/Assignment/')
getwd()
library(ggplot2)
library(ggmap)
library(maps)
statesMap = world_map('states')
statesMap = map_data('states')
statesMap = map_data('state')
#1.1
str(statesMap)
unique(statesMap$group)
length(unique(statesMap$group))
ggplot(statesMap, aes(x = long, y = lat, group = group)) + geom_polygon(color = 'black', fill = 'white')
polling = read.csv('PollingImputed.csv')
str(polling)
train = subset(polling, polling$Year %in% c(2004, 2008))
test = subset(polling, polling$Year == 2012)
unique(train$Year)
unique(train$Year)
unique(test$Year)
logModel = glm(Republican ~ ., data = train, family = binomial)
logModel = glm(Republican ~ SurveyUSA + DiffCount, data = train, family = binomial)
testPredict = predict(logModel, newdata = test, type = 'response')
testPredictionBinary = as.numeric(testPredict > 0.5)
predictionDataFrame = as.data.frame(testPredict, testPredictionBinary, test$State)
predictionDataFrame = data.frame(testPredict, testPredictionBinary, test$State)
str(predictionDataFrame)
table(predictionDataFrame$testPredictionBinary)
mean(predictionDataFrame$testPredict)
predictionDataFrame$region = tolower(predictionDataFrame$test.State)
predictionMap = merge(predicitonDataFrame, statesMap, by = 'region')
predictionMap = merge(predictionDataFrame, statesMap, by = 'region')
predictionMap = predictionMap[order(predictionMap$order)]
predictionMap = predictionMap[order(predictionMap$order), ]
str(predictionMap)
str(statesMap)
ggplot(predictionMap, aes(x = long, y = lat, fill = testPredictionBinary)) +
geom_polygon(color = 'black')
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = testPredictionBinary)) +
geom_polygon(color = 'black')
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = testPredictionBinary)) +
geom_polygon(color = 'black') +
scale_fill_gradient(high = 'red', low = 'blue', guide = 'legend', breaks = c(0,1),
labels = c('Republican', 'Democrat'), name = 'Prediction 2012')
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = testPredict)) +
geom_polygon(color = 'black') +
scale_fill_gradient(high = 'red', low = 'blue', guide = 'legend', breaks = c(0,1),
labels = c('Republican', 'Democrat'), name = 'Prediction 2012')
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = testPredict)) +
geom_polygon(color = 'black') +
scale_fill_gradient(high = 'red', low = 'blue', guide = 'legend',
labels = c('Republican', 'Democrat'), name = 'Prediction 2012')
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = testPredict)) +
geom_polygon(color = 'black') +
scale_fill_gradient(high = 'red', low = 'blue', guide = 'legend', breaks = c(0, 1),
labels = c('Republican', 'Democrat'), name = 'Prediction 2012')
unique(testPredict)
predictionMap[predictionMap$region == 'florida', predictionMap$testPredict]
predictionMap[predictionMap$region == 'florida',]
predictionMap[predictionMap$region == 'florida',predictionMap$testPredict]
subset(predictionMap, region == 'florida')
head(subset(predictionMap, region == 'florida'))
unique(subset(predictionMap, region == 'florida'))
head(subset(predictionMap, region == 'florida'))
?geom_polygon
?alpha
?linetype
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = testPredict)) +
geom_polygon(color = 'black', linetype = 3) +
scale_fill_gradient(high = 'red', low = 'blue', guide = 'legend', breaks = c(0, 1),
labels = c('Republican', 'Democrat'), name = 'Prediction 2012')
?linewidth
?width
?lty
?wt
?lwd
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = testPredict)) +
geom_polygon(color = 'black', linetype = 1, lwd = 3) +
scale_fill_gradient(high = 'red', low = 'blue', guide = 'legend', breaks = c(0, 1),
labels = c('Republican', 'Democrat'), name = 'Prediction 2012')
?geom_polygon
?size
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = testPredict)) +
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = testPredict)) +
geom_polygon(color = 'black', linetype = 1, size = 3) +
scale_fill_gradient(high = 'red', low = 'blue', guide = 'legend', breaks = c(0, 1),
labels = c('Republican', 'Democrat'), name = 'Prediction 2012')
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = testPredict)) +
geom_polygon(color = 'black', linetype = 1, size = 3) +
scale_fill_gradient(high = 'red', low = 'blue', guide = 'legend', breaks = c(0, 1),
labels = c('Republican', 'Democrat'), name = 'Prediction 2012')
?alpha
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = testPredict)) +
geom_polygon(color = 'black', alpha = 0.3) +
scale_fill_gradient(high = 'red', low = 'blue', guide = 'legend', breaks = c(0, 1),
labels = c('Republican', 'Democrat'), name = 'Prediction 2012')
getwd()
setwd('/Users/admin/Documents/Coursera/AnalyticsEdge-edX/Week7/Assignment/')
getwd()
library(ggplot2)
edges = read.csv('edges.csv')
str(edges)
subset(edges, V1 == 4019 || V2 == 4019)
subset(edges, V1 == 4019)
subset(edges, V2 == 4019)
users = read.csv('users.csv')
str(users)
str(edges)
unique(users$id)
mean(length(users$id))
length(users$id)
merge(users, edges, by.x = 'id', by.y = 'V1')
usersEdges = merge(users, edges, by.x = 'id', by.y = 'V1')
merge(users, edges, by.x = 'id', by.y = 'V2')
tapply(usersEdges, id, mean)
tapply(usersEdges, usersEdges$id, mean)
usersEdges = merge(users, edges, by.x = 'id', by.y = 'V1')
tapply(length(usersEdges$V2), usersEdges$id, mean)
aggregate(usersEdges, usersEdges$id, mean)
aggregate(usersEdges, by = list(usersEdges$id), mean)
aggregate(length(usersEdges$V2), by = list(usersEdges$id), mean)
table(usersEdges$id, usersEdges$V2)
tapply(usersEdges$V2, usersEdges$id, count)
tapply(usersEdges$V2, usersEdges$id, length)
mean(tapply(usersEdges$V2, usersEdges$id, length))
usersEdges = merge(users, edges, by.x = 'id', by.y = 'V2')
mean(tapply(usersEdges$V2, usersEdges$id, length))
mean(tapply(usersEdges$V1, usersEdges$id, length))
tapply(usersEdges$V1, usersEdges$id, length)
mode(tapply(usersEdges$V1, usersEdges$id, length))
mod(tapply(usersEdges$V1, usersEdges$id, length))
median(tapply(usersEdges$V1, usersEdges$id, length))
usersEdges = merge(users, edges, by.x = 'id', by.y = 'V1')
median(tapply(usersEdges$V2, usersEdges$id, length))
avgFriends = (2 * nrow(edges)) / nrow(users)
avgFriends
str(users)
table (users$locale, users$school)
table (users$school, users$locale)
unique(users$school)
table(users$school, users$gender)
install.packages('igraph')
library(igraph)
?graph.data.frame
g <- graph.data.frame(edges, directed = FALSE, vertices = users)
plot(g, vertex.size = 0.5, vertex.label = NA)
degree(g)
sort(degree(g))
length(degree(g) >= 10)
degree(g) >= 10
isTRUE(degree(g) >= 10)
degree(g)[degree(g) >= 10]
length(degree(g)[degree(g) >= 10])
?V()
v(g)
V(g)
V(g)$size = degree(g) / 2 + 2
plot(g, vertex.label = NA)
sort(V(g)$size)
V(g)$color = 'black'
V(g)$color[V(g)$gender == 'A'] = 'red'
V(g)$color[V(g)$gender == 'B'] = 'gray'
plot(g, vertex.label = NA)
table(degree(g), V(g)$gender)
sort(table(degree(g), V(g)$gender))
table(V(g)$gender, degree(g))
degree(g)
sort(degree(g))
V(g)$school
unique(V(g)$school)
plot(g, vertex.label = NA)
plot(g)
vertex.label = NA
plot(g, vertex.label = NA)
unique(V(g)$locale)
unique(V(g)$locale)
V(g)$color = 'black'
V(g)$color[V(g)$locale == 'A'] = 'red'
V(g)$color[V(g)$locale == 'B'] = 'gray'
plot(g, vertex.label = NA)
?igraph.plotting
?igraph.plot
plot(g, vertex.label = NA, width = 5)
plot(g, vertex.label = NA, edge.width = 5)
getwd()
setwd('/Users/admin/Documents/Coursera/AnalyticsEdge-edX/Week7/Assignment/')
getwd()
library(ggplot2)
tweets = read.csv('tweets.csv', stringsAsFactors = FALSE)
library(tm)
str(tweets)
tweetCorpus = Corpus(VectorSource(tweets$Tweet))
tweetCorpus = tm_map(tweetCorpus, tolower)
tweetCorpus = tm_map(tweetCorpus,PlainTextDocument)
tweetCorpus = tm_map(tweetCorpus, removePunctuation)
tweetCorpus = tm_map(tweetCorpus, removeWords, stopwords('English'))
tweetDTM = DocumentTermMatrix(tweetCorpus)
str(tweetDTM)
allTweets = as.data.frame(tweetDTM)
allTweets = as.data.frame(as.matrix(tweetDTM))
str(allTweets)
install.packages('wordcloud')
library(wordcloud)
rownames(allTweets)
head(colnames(allTweets))
head(colnames(allTweets), 20)
head(colnames(allTweets), 40)
head(colnames(allTweets), 80)
head(colSums(allTweets), 80)
?wordcloud
wordcloud(colnames(allTweets), colSums(allTweets))
wordcloud(colnames(allTweets), colSums(allTweets), scale = c(2, 0.25))
tweetCorpus = tm_map(tweetCorpus, removeWords, 'apple')
tweetDTM = DocumentTermMatrix(tweetCorpus)
allTweets = as.data.frame(as.matrix(tweetDTM))
wordcloud(colnames(allTweets), colSums(allTweets), scale = c(2, 0.25))
?wordcloud
wordcloud(colnames(allTweets), colSums(allTweets), scale = c(2, 0.25), random.color = TRUE)
wordcloud(colnames(allTweets), colSums(allTweets), scale = c(2, 0.25),
colors = c('black','blue','red', 'orange', 'green'), random.color = TRUE)
?wordcloud
colors = c('black','blue','red', 'orange', 'green'), ordered.colors = TRUE)
wordcloud(colnames(allTweets), colSums(allTweets), scale = c(2, 0.25),
colors = c('black','blue','red', 'orange', 'green'), ordered.colors = TRUE)
wordcloud(colnames(allTweets), colSums(allTweets), scale = c(2, 0.25),
colors = c('black','blue','red', 'orange', 'green'), random.color = TRUE)
negativeTweets = subset(allTweets, tweets$Avg <= -1)
wordCloud(colnames(negativeTweets), colSums(negativeTweets))
wordcloud(colnames(negativeTweets), colSums(negativeTweets))
wordcloud(colnames(allTweets), colSums(allTweets), scale = c(2, 0.25), random.order = FALSE)
?wordcloud
wordcloud(colnames(negativeTweets), colSums(negativeTweets), rot.per = 0.5)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), rot.per = 0.1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), rot.per = 0.3)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), rot.per = 0.2)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), rot.per = 0.15)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), rot.per = 0.1)
wordcloud(colnames(allTweets), colSums(allTweets), scale = c(2, 0.25),
colors = c('black','blue','red', 'orange', 'green'), random.color = FALSE)
install.packages('RColorBrewer')
install.packages("RColorBrewer")
library(RColorBrewer)
display.brewer.all()
